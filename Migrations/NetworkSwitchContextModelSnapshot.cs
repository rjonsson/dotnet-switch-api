// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using switch_api.DataAccess;

namespace switch_api.Migrations
{
    [DbContext(typeof(NetworkSwitchContext))]
    partial class NetworkSwitchContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("switch_api.Models.NetworkSwitch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Domain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("NetworkSwitches");
                });

            modelBuilder.Entity("switch_api.Models.Port", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Mode")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NetworkSwitchId")
                        .HasColumnType("int");

                    b.Property<bool>("Shutdown")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("NetworkSwitchId");

                    b.ToTable("Ports");
                });

            modelBuilder.Entity("switch_api.Models.PortVlan", b =>
                {
                    b.Property<int>("PortId")
                        .HasColumnType("int");

                    b.Property<int>("VlanId")
                        .HasColumnType("int");

                    b.HasKey("PortId", "VlanId");

                    b.HasIndex("VlanId");

                    b.ToTable("PortVlans");
                });

            modelBuilder.Entity("switch_api.Models.Vlan", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Vlans");
                });

            modelBuilder.Entity("switch_api.Models.Port", b =>
                {
                    b.HasOne("switch_api.Models.NetworkSwitch", "NetworkSwitch")
                        .WithMany("Ports")
                        .HasForeignKey("NetworkSwitchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("switch_api.Models.PortVlan", b =>
                {
                    b.HasOne("switch_api.Models.Port", "Port")
                        .WithMany("Vlans")
                        .HasForeignKey("PortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("switch_api.Models.Vlan", "Vlan")
                        .WithMany("Ports")
                        .HasForeignKey("VlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
